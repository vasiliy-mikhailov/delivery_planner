[{"/usr/src/app/src/App.js":"1","/usr/src/app/src/reportWebVitals.js":"2","/usr/src/app/src/index.js":"3"},{"size":3531,"mtime":1610624396639,"results":"4","hashOfConfig":"5"},{"size":362,"mtime":1606331127332,"results":"6","hashOfConfig":"5"},{"size":909,"mtime":1609418479176,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10","usedDeprecatedRules":"11"},"1x62h99",{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"/usr/src/app/src/App.js",["17"],"import './App.css';\nimport React from \"react\";\nimport * as Sentry from '@sentry/react';\nimport { ToastContainer, toast } from 'react-toastify';\n\n  import 'react-toastify/dist/ReactToastify.css';\n\nfunction FallbackComponent() {\n  return (\n    <div>An error has occured</div>\n  )\n}\n\nfunction App() {\n\n    const deliveryPlannerAppUrl = `${process.env.REACT_APP_DELIVERY_PLANNER_APP_URL}`;\n\n    const uploadExternalTasksUrl = `${deliveryPlannerAppUrl}/upload_external_tasks`\n\n    const uploadExternalTasks = (params: {externalTasksFile: File}) => {\n        const externalTasksFormData = new FormData()\n        externalTasksFormData.append('external_tasks_file', params.externalTasksFile)\n\n        fetch(uploadExternalTasksUrl, {\n            method: 'PUT',\n            body: externalTasksFormData\n        })\n            .then((response) => {\n                if (response.ok) {\n                    alert('Загружено')\n                } else {\n                    alert('Ошибка')\n                    throw new Error('Error uploading external tasks file')\n                }\n            })\n            .then((data) => {\n            })\n            .catch(error => {\n                Sentry.captureException(error);\n            })\n    }\n\n    const planDeliveryUrl = `${deliveryPlannerAppUrl}/plan_delivery`\n\n    const makeBrowserDownloadPlan = (params: {fileContents: Blob}) => {\n        const url = window.URL.createObjectURL(params.fileContents)\n        const link = document.createElement('a')\n        link.href = url\n        link.setAttribute('download', 'plan_output.xlsx')\n        document.body.appendChild(link)\n        link.click()\n        link.parentNode.removeChild(link)\n    }\n\n    const planDelivery = (params: {deliveryPlanFile: File}) => {\n        const deliveryPlanFormData = new FormData()\n        deliveryPlanFormData.append('plan_file', params.deliveryPlanFile)\n\n        fetch(planDeliveryUrl, {\n            method: 'POST',\n            body: deliveryPlanFormData\n        })\n            .then((response) => {\n                if (response.ok) {\n                    return response.blob()\n                }\n\n                throw response\n            }\n        )\n            .then((blob) => {\n                makeBrowserDownloadPlan({fileContents: blob})\n            })\n            .catch(error => {\n                console.error(error)\n\n                error.json().then (\n                    (json) => {\n                        console.log(json.detail)\n                        toast.error(json.detail)\n                    }\n                )\n            })\n    }\n\n    const prepareInputForNextUpload= (params: {input: any}) => {\n        params.input.value = null\n    }\n\n    return (\n        <Sentry.ErrorBoundary fallback={FallbackComponent} showDialog>\n            <div className=\"App\">\n                {/* <input type=\"file\" id=\"externalTasksFileInput\" onChange={(e) => uploadExternalTasks({externalTasksFile: e.target.files[0]})}/> */}\n\n                Файл\n                <input\n                    style={{marginTop: 100}}\n                    type=\"file\"\n                    id=\"deliveryPlanFileInput\"\n                    onChange={\n                        (e) => {\n                            planDelivery({deliveryPlanFile: e.target.files[0]})\n                            prepareInputForNextUpload({input: e.target})\n                        }\n                    }\n                />\n                <ToastContainer />\n            </div>\n        </Sentry.ErrorBoundary>\n    );\n}\n\nexport default App;\n",["18","19"],"/usr/src/app/src/reportWebVitals.js",[],["20","21"],"/usr/src/app/src/index.js",[],{"ruleId":"22","severity":1,"message":"23","line":20,"column":11,"nodeType":"24","messageId":"25","endLine":20,"endColumn":30},{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","replacedBy":"29"},{"ruleId":"26","replacedBy":"30"},{"ruleId":"28","replacedBy":"31"},"no-unused-vars","'uploadExternalTasks' is assigned a value but never used.","Identifier","unusedVar","no-native-reassign",["32"],"no-negated-in-lhs",["33"],["32"],["33"],"no-global-assign","no-unsafe-negation"]